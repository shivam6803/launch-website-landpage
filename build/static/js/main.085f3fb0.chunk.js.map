{"version":3,"sources":["hero.svg","components/Main.js","components/Contact.js","components/Thanks.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Main","useState","joined","setJoined","history","useHistory","Fragment","src","hero","to","className","onSubmit","e","preventDefault","today","Date","date","getFullYear","getMonth","getDate","push","type","placeholder","onChange","target","value","Contact","title","setTitle","content","setContent","contactEmail","setContactEmail","sendEmail","a","email","console","log","onClick","goBack","htmlFor","name","Thanks","useParams","location","state","Routes","exact","path","component","App","_contact","setPath","window","addEventListener","pathname","useEffect","listen","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.085f3fb0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hero.b5361f45.svg\";","import React, {useState} from \"react\";\r\nimport hero from \"../hero.svg\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\nconst Main = () => {\r\n\r\n    const [joined, setJoined] = useState(\"\");\r\n    const history = useHistory();\r\n\r\n\r\n    const join = (e) =>{\r\n        e.preventDefault();\r\n        if(joined !== \"\"){\r\n            let today = new Date();\r\n            let date = today.getFullYear()+ '-' +(today.getMonth()+1) + '-' + today.getDate();\r\n            history.push(`/thanks/${joined}`, date );\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <header>\r\n                <img src={hero} />\r\n                <div>\r\n                    <h1>Mobile Application.</h1>\r\n                    <Link to=\"/contact\">Get in touch</Link>\r\n                </div>\r\n          \r\n            </header>\r\n\r\n\r\n            <main>\r\n                <section className=\"services\">\r\n                     <h2>Why this app is good For you?</h2>\r\n\r\n                     <div className=\"service-container\">\r\n                         <div className=\"services-card service-one\"></div>\r\n                         <div className=\"service-description\">\r\n\r\n                            <h3>User Friendy.</h3>\r\n                         </div>\r\n                    </div>\r\n\r\n\r\n\r\n                    <div className=\"service-container\">\r\n                      \r\n                      <div className=\"services-card service-two\"></div>\r\n                      <div className=\"service-description\">\r\n                          <h3>Clear &amp; Helpful.</h3>\r\n                      </div>\r\n                    </div>\r\n\r\n\r\n\r\n                    <div className=\"service-container\">\r\n                        <div className=\"services-card service-three\"></div>\r\n                        <div className=\"service-description\">\r\n                            <h3>Support 24 hours.</h3>\r\n                        </div>\r\n                      \r\n                    </div>\r\n                </section>\r\n\r\n                <section>\r\n                    <h2>Send your email to get Early Access.</h2>\r\n\r\n                    <form className=\"newsletter\" onSubmit={join}>\r\n                        <input type=\"email\" placeholder=\"Your email goes here\" onChange={(e) => setJoined(e.target.value)} />\r\n                        <input type=\"submit\"  value=\"Join Now!\"/>\r\n                    </form>\r\n\r\n                </section>\r\n            </main>\r\n\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\nexport default Main;","import React, {useState} from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Contact = () => {\r\n\r\n    const history = useHistory();\r\n    const goBack = () => {\r\n        history.goBack();\r\n    }\r\n\r\n    const [title, setTitle] = useState(\"\");\r\n    const [content, setContent] = useState(\"\");\r\n    const [contactEmail, setContactEmail] = useState(\"\"); \r\n\r\n    const sendEmail = async(e) =>{\r\n        e.preventDefault();\r\n\r\n        let email = {\r\n            title,\r\n            content,\r\n            contactEmail\r\n        }\r\n\r\n        console.log(\"sending email\", email);\r\n    }\r\n\r\n\r\n    return(\r\n        <React.Fragment>\r\n           <button className=\"back\" onClick={goBack}> &larr; Go Back</button>\r\n\r\n            <form className=\"contact\" onSubmit={sendEmail}>\r\n                <h2>Send me a message so we can start a new project</h2>\r\n                \r\n                <label htmlFor=\"title\">Message Title: </label>\r\n                <input type=\"text\" name=\"title\" onChange={(e) => setTitle(e.target.value)} />\r\n                \r\n                <label htmlFor=\"content\">Message Content: </label>\r\n                <textarea name=\"content\"  onChange={(e) => setContent(e.target.value)}  ></textarea>\r\n            \r\n                <label htmlFor=\"email\">Contact Email: </label>\r\n                <input type=\"email\" name=\"email\" onChange={(e) => setContactEmail(e.target.value)} />\r\n\r\n                <input type=\"submit\" value=\"Send Message\" />\r\n            </form>\r\n\r\n        </React.Fragment>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Contact;","import React, {useState} from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\n\r\nconst Thanks = () => {\r\n\r\n    const history = useHistory();\r\n    const { name } = useParams();\r\n\r\n    console.log(history);\r\n\r\n\r\n    return(\r\n        <React.Fragment>\r\n           <div className=\"thanks\">\r\n             <p>Thanks <strong>{name}!!</strong></p>\r\n             <p>You joined <strong>{history.location.state}</strong></p>\r\n           \r\n            <hr/>\r\n            <p><strong>Disclaimer : </strong>Will reach you soon</p>\r\n           \r\n           </div>\r\n        </React.Fragment>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Thanks;","import React from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\n\r\n//components\r\nimport Main from \"./components/Main\";\r\nimport Contact from \"./components/Contact\";\r\nimport Thanks from \"./components/Thanks\";\r\n\r\n\r\nconst Routes = () => (\r\n    <Switch>\r\n        <Route exact path=\"/\" component={Main} />\r\n        <Route exact path=\"/contact\" component={Contact} />\r\n        <Route exact path=\"/thanks/:name\" component={Thanks} />\r\n    </Switch>\r\n);\r\n\r\nexport default Routes;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Routes from \"./routes\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n \r\nfunction App() {\r\n\r\n  const history = useHistory();\r\n  const [path, setPath] = useState(\"\");\r\n\r\n  window.addEventListener(\"load\", () => {\r\n    \r\n    if(window.location.pathname === \"/contact\"){\r\n      setPath(window.location.pathname);\r\n    }\r\n  });\r\n\r\n\r\n  const checkPath = () => {\r\n    history.listen((location) => {\r\n      setPath(location.pathname);\r\n    });\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    checkPath();\r\n  }, []);\r\n\r\n\r\n  const showContact = path;\r\n  let _contact;\r\n  if(showContact !== \"/contact\"){\r\n    _contact = (<li><Link to=\"/contact\">Contact Me</Link></li>)\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n     <div className=\"container\">\r\n        <nav>\r\n          <ul>\r\n            <li><Link to=\"/\"> SOCIAL NETWORKING APP</Link></li>\r\n          </ul>\r\n          <ul>\r\n            {_contact}\r\n          </ul>\r\n        </nav>\r\n        <Routes />\r\n     </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n<BrowserRouter>\r\n<App />\r\n</BrowserRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}